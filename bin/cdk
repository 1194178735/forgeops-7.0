#!/usr/bin/env python3
"""This script deploys the ForgeRock Identity Plaform components to Kubernetes."""

import argparse
import os
import sys
from urllib import request
import utils

def get_component_url(component, tag):
    """Calculates the target URL of the desired component"""
    if tag == 'latest':
        return f'https://github.com/ForgeRock/forgeops/releases/latest/download/{component}.yaml'
    return f'https://github.com/ForgeRock/forgeops/releases/download/{tag}/{component}.yaml'

def deploy_repo_manifest(component, ns, tag, fqdn):
    """Deploy the component using released manifest"""
    component_url = get_component_url(component, tag)
    try:
        with request.urlopen(component_url, timeout=5) as r:
            contents = r.read().decode('ascii')
            contents = contents.replace('namespace: default', f'namespace: {ns}')
            contents = contents.replace('default.iam.example.com', f'{fqdn}')
            utils.run('kubectl', f'-n {ns} apply -f -', stdin=bytes(contents, 'ascii'))
    except Exception as e:
        print(f'Could not deploy {component_url}. Got: {e}')
        sys.exit(1)  # Hide python traceback. kubectl error should be enough here

def deploy_local_manifest(component, ns, fqdn):
    """Deploy local component (local mode)"""
    # Clean out the temp kustomize files
    kustomize_dir = os.path.join(sys.path[0], '../kustomize')
    image_defaulter = os.path.join(kustomize_dir, 'dev', 'image-defaulter')
    utils.run('kustomize', 'edit remove resource ../../../kustomize/*/*/* ../../../kustomize/*/*',
              cwd=image_defaulter)
    bundles = {
        'base': ['dev/kustomizeConfig', 'base/secrets', 'base/7.0/ingress', 'base/git-server', 'dev/scripts'],
        'ds': ['base/ds-idrepo'],
        'apps': ['base/amster', 'dev/am', 'dev/idm', 'base/rcs-agent'],
        'ui': ['base/admin-ui', 'base/end-user-ui', 'base/login-ui'],
        'am': ['dev/am'],
        'idm': ['dev/idm']
    }
    components_to_install = bundles.get(component, [f'base/{component}'])
    # Temporarily add the wanted kustomize files
    for c in components_to_install:
        utils.run('kustomize', f'edit add resource ../../../kustomize/{c}', cwd=image_defaulter)
    _, contents, _ = utils.run('kustomize', f'build {image_defaulter}', cstdout=True)
    contents = contents.decode('ascii')
    contents = contents.replace('namespace: default', f'namespace: {ns}')
    contents = contents.replace('default.iam.example.com', f'{fqdn}')
    utils.run('kubectl', f'-n {ns} apply -f -', stdin=bytes(contents, 'ascii'))
    # Clean out the temp kustomize files
    utils.run('kustomize', 'edit remove resource ../../../kustomize/*/*/* ../../../kustomize/*/*',
              cwd=image_defaulter)

def deploy_component(component, ns, fqdn, tag):
    """Deploy the Component manifest"""
    if tag:
        deploy_repo_manifest(component, ns, tag, fqdn)
        return
    deploy_local_manifest(component, ns, fqdn)

def uninstall_component(component, ns):
    """Uninstall a manifest"""
    component_url = get_component_url(component, 'latest')
    try:
        with request.urlopen(component_url, timeout=5) as r:
            contents = r.read().decode('ascii')
            contents = contents.replace('namespace: default', f'namespace: {ns}')
            utils.run('kubectl', f'-n {ns} delete --ignore-not-found=true -f -',
                      stdin=bytes(contents, 'ascii'))
            if component in ['base', 'quickstart']:
                utils.run('kubectl', f'-n {ns} delete pvc --all --ignore-not-found=true')
    except Exception as e:
        print(f'Could not delete {component}. Got: {e}')
        sys.exit(1)  # Hide python traceback.

def deploy_quickstart(ns, fqdn, tag):
    """Deploy the quickstart"""
    utils.message('Deploying base.yaml. This is a one time activity.')
    deploy_component('base', ns, fqdn, tag)
    utils.message('\nDeploying ds.yaml. This is includes all directory resources.')
    deploy_component('ds', ns, fqdn, tag)
    utils.message('\nWaiting for git-server and DS pods to come up. This can take several minutes.')
    utils.run('kubectl', f'-n {ns} wait --for=condition=Available deployment -l app.kubernetes.io/name=git-server --timeout=120s')
    utils.run('kubectl', f'-n {ns} rollout status --watch statefulset ds-idrepo --timeout=300s')
    utils.message('\nDeploying apps.')
    deploy_component('apps', ns, fqdn, tag)
    utils.message('\nWaiting for AM deployment to become available. This can take several minutes.')
    utils.run('kubectl', f'-n {ns} wait --for=condition=Available deployment -l app.kubernetes.io/name=am --timeout=600s')
    utils.message('\nWaiting for amster job to complete. This can take several minutes.')
    utils.run('kubectl', f'-n {ns} wait --for=condition=complete job/amster --timeout=600s')
    utils.message('\nRemoving "amster" deployment.')
    uninstall_component('amster', ns)
    utils.message('\nDeploying UI.')
    deploy_component('ui', ns, fqdn, tag)
    # message('\nWaiting for UI pods to become ready')
    # run('kubectl', f'-n {ns} wait --for=condition=Available deployment -l app.kubernetes.io/component=ui --timeout=600s')

def install_dependencies():
    """Check and install dependencies"""
    print('Checking secret-agent operator and related CRDs:', end=' ')
    try:
        utils.run('kubectl', 'get crd secretagentconfigurations.secret-agent.secrets.forgerock.io',
                  cstderr=True, cstdout=True)
    except Exception as _e:
        utils.warning('secret-agent CRD not found. Installing secret-agent.')
        utils.secretagent('apply')
    else:
        utils.message('secret-agent CRD found in cluster.')

    print('Checking ds-operator and related CRDs:', end=' ')
    try:
        utils.run('kubectl', 'get crd directoryservices.directory.forgerock.io', cstderr=True, cstdout=True)
    except Exception:
        utils.warning('ds-operator CRD not found. Installing ds-operator.')
        utils.dsoperator('apply')
    else:
        utils.message('ds-operator CRD found in cluster.')
    print()

def main():
    common = argparse.ArgumentParser(add_help=False)
    common.add_argument('-n', '--namespace', default='',
                        help='Target namespace (default: current namespace)')
    common.add_argument('components', nargs='*')
    parser = argparse.ArgumentParser(
        description='Manage ForgeRock platform components')
    subparser = parser.add_subparsers(dest='cmd', required=True)
    parser_install = subparser.add_parser('install', parents=[common],
                                          help='Install the platform components or component bundles using local manifests')
    parser_install.add_argument('-f', '--fqdn', dest='fqdn',
                                help='Select the FQDN for this deployment')
    parser_install.add_argument('--stable', dest='stable', action='store_true',
                                help='Install the platform using latest stable manifests. You can set the release tag using --tag')
    parser_install.add_argument('-t', '--tag', dest='tag', default='latest',
                                help='Select the forgeops tag to install when using --stable (default: latest)')
    parser_delete = subparser.add_parser(
        'delete', parents=[common], help='Delete ForgeRock Platform components or component bundles')
    parser_delete.add_argument('-y', '--yes', dest='skip_confirmation', action='store_true',
                               help='Skip delete confirmation')
    subparser.add_parser('info', parents=[common], help='Print relevant deployment information')
    args = parser.parse_args()

    _, ctx_namespace, _ = utils.run('kubectl',
                                    'config view --minify --output=jsonpath={..namespace}', cstdout=True)
    ctx_namespace = ctx_namespace.decode('ascii') if ctx_namespace else 'default'
    namespace = args.namespace or ctx_namespace
    components = args.components if getattr(args, 'components', None) else ['quickstart']
    fqdn = args.fqdn if getattr(args, 'fqdn', None) else f'{namespace}.iam.example.com'
    stable = getattr(args, 'stable', None)
    tag = getattr(args, 'tag', None) if stable else None
    if stable:
        utils.warning(f'Using "stable" images and k8s manifests as specified in ForgeRock/forgeops "{tag}" release')
    if args.cmd == 'info':
        utils.printsecrets(namespace)
        utils.printurls(namespace)
        return
    if args.cmd is None:
        parser.print_help()
        sys.exit(1)
    if args.cmd == 'delete':
        utils.message(f'Uninstalling component(s): {components}')
        if not args.skip_confirmation:
            if input('OK to delete these components? [Y/N] ').lower() not in ['yes', 'y']:
                return
        if 'base' in components: #delete 'base' last
            components.append(components.pop(components.index('base')))
        for c in components:
            uninstall_component(c, namespace)
        return

    install_dependencies()
    utils.message(f'Installing component(s): {components}\n')
    if 'quickstart' in components:
        deploy_quickstart(namespace, fqdn, tag)
    else:
        for c in components:
            deploy_component(c, namespace, fqdn, tag)

    if args.cmd == 'install' and ('base' in components or 'quickstart' in components):
        utils.waitforsecrets(namespace)
        utils.printsecrets(namespace)
        utils.printurls(namespace)
    print('\nEnjoy your deployment!')
    return

if __name__ == '__main__':
    main()
