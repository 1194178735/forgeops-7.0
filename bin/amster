#!/usr/bin/python3
# Script to import or export dynamic configuration files from AM using an amster Kubernetes job.
# This must be run in the same namespace as AM. The amster pod expects to find the amster secret key
# (generated by secret agent) in the namespace.
import argparse
import utils
import os
import sys
import time

def amster_import(ns, src, printlogs=True):
    kustomize_dir = os.path.join(sys.path[0], '../kustomize')
    docker_dir = os.path.join(sys.path[0], '../docker')
    amster_upload_job_path = os.path.join(kustomize_dir, 'base', 'amster-upload')
    amster_scripts_path = os.path.join(docker_dir, 'amster', 'scripts')
    # If the source dir/file does not exist exit
    if not os.path.exists(src):
        utils.error(f'Cant read path {src}. Please specify a valid path and try again')
        sys.exit(1)
    try:
        clean_amster_job(ns)
        utils.message('Packing and uploading configs')
        envVars = os.environ
        envVars['COPYFILE_DISABLE'] = '1'  #skips "._" files in macOS.
        utils.run('tar', f'-czf amster-import.tar.gz -C {src} .', cstdout=True, env=envVars)
        utils.run('tar', f'-czf amster-scripts.tar.gz -C {amster_scripts_path} .', cstdout=True, env=envVars)
        utils.run('kubectl', f'-n {ns} create cm amster-files --from-file=amster-import.tar.gz --from-file=amster-scripts.tar.gz')
        pod = _launch_amster_job(amster_upload_job_path, ns)
        utils.message('\nWaiting for amster job to complete. This can take several minutes.')
        utils.run('kubectl', f'-n {ns} wait --for=condition=complete job/amster --timeout=600s')
        if printlogs:
            utils.message('Captured logs from the amster pod')
            utils.run('kubectl', f'-n {ns} logs -c amster {pod}')
    finally:
        clean_amster_job(ns)

def amster_export(ns, dst, glob):
    kustomize_dir = os.path.join(sys.path[0], '../kustomize')
    docker_dir = os.path.join(sys.path[0], '../docker')
    amster_export_job_path = os.path.join(kustomize_dir, 'base', 'amster-export')
    amster_scripts_path = os.path.join(docker_dir, 'amster', 'scripts')
    if not os.path.isdir(dst):
        utils.error(f'{dst} is not a valid directory. Please specify a valid path and try again')
        sys.exit(1)
    try:
        clean_amster_job(ns)
        utils.message('Packing and uploading configs')
        envVars = os.environ
        envVars['COPYFILE_DISABLE'] = '1'  #skips "._" files in macOS.
        utils.run('tar', f'-czf amster-scripts.tar.gz -C {amster_scripts_path} .', cstdout=True, env=envVars)
        utils.run('kubectl', f'-n {ns} create cm amster-files --from-file=amster-scripts.tar.gz')
        # Create export - amster will export data, and wait.
        pod = _launch_amster_job(amster_export_job_path, ns)
        utils.message('\nWaiting for amster job to complete. This can take several minutes.')
        utils.run('kubectl', f'-n {ns} wait --for=condition=ready pod {pod} --timeout=600s')

        # If args.glob is True, copy the realm AND global data
        if glob:
            utils.run('kubectl', f'-n {ns} cp -c pause {pod}:/var/tmp/amster {dst}')
        else:
            utils.run('kubectl', f'-n {ns} cp -c pause {pod}:/var/tmp/amster/realms {dst}/realms')

        if not os.listdir(dst):
            utils.error('No files were exported!')
            sys.exit(1)
    finally:
        clean_amster_job(ns)

# Launch an amster job specified. Provide the path to the kustomize for the amster job. Returns the pod name.
def _launch_amster_job(kustomize_path, ns):
    utils.message('Deploying amster')
    _, contents, _ = utils.run('kustomize', f'build {kustomize_path}', cstdout=True)
    contents = contents.decode('ascii')
    contents = contents.replace('namespace: default', f'namespace: {ns}')
    utils.run('kubectl', f'-n {ns} apply -f -', stdin=bytes(contents, 'ascii'))
    time.sleep(5) # Allow kube-scheduler to create the pod
    _, amster_pod_name, _ = utils.run('kubectl', f'-n {ns} get pods -l app.kubernetes.io/name=amster -o jsonpath={{.items[0].metadata.name}}',
                                      cstdout=True)
    return amster_pod_name.decode('ascii')

def clean_amster_job(ns):
    utils.message(f'Cleaning up amster components')
    utils.run('kubectl', f'-n {ns} delete --ignore-not-found=true job amster')
    utils.run('kubectl', f'-n {ns} delete --ignore-not-found=true cm amster-files')
    if os.path.exists('amster-import.tar.gz'): 
        os.remove('amster-import.tar.gz')
    if os.path.exists('amster-scripts.tar.gz'): 
        os.remove('amster-scripts.tar.gz')
    return

def main():
    common = argparse.ArgumentParser(add_help=False)
    common.add_argument('-n', '--namespace', default='',
                        help='Target namespace (default: current namespace)')
    parser = argparse.ArgumentParser(
        description='amster import or export json configuration files')
    subparser = parser.add_subparsers(dest='cmd', required=True, help='select action to perform')
    parser_import = subparser.add_parser('import', help='import json configuration files into AM', parents=[common])
    parser_import.add_argument('src', help='Source file or directory to import')
    parser_export = subparser.add_parser('export', help='Export files from amster', parents=[common])
    parser_export.add_argument('--global', dest='glob', action='store_true', help='Include the global/ configuration in the amster export')
    parser_export.add_argument('dst', help='destination directory to export files to')
    parser_clean = subparser.add_parser('clean', help='Clean up and remove any amster pods', parents=[common])

    args = parser.parse_args()
    ctx_namespace = utils.get_namespace()
    namespace = getattr(args, 'namespace', None) or ctx_namespace

    if args.cmd == 'clean':
        clean_amster_job(namespace)

    # Import files into amster.
    if args.cmd == 'import':
        amster_import(namespace, args.src)
        return

    # Export files out of amster
    if args.cmd == 'export':
        amster_export(namespace, args.dst, args.glob)
        return

if __name__ == '__main__':
    main()