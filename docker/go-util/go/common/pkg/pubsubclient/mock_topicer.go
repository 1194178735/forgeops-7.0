// Code generated by mockery v1.0.0. DO NOT EDIT.
package pubsubclient

import context "context"
import mock "github.com/stretchr/testify/mock"

// MockTopicer is an autogenerated mock type for the Topicer type
type MockTopicer struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx
func (_m *MockTopicer) Delete(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: ctx
func (_m *MockTopicer) Exists(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ID provides a mock function with given fields:
func (_m *MockTopicer) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Publish provides a mock function with given fields: ctx, msg
func (_m *MockTopicer) Publish(ctx context.Context, msg Messager) PublishResulter {
	ret := _m.Called(ctx, msg)

	var r0 PublishResulter
	if rf, ok := ret.Get(0).(func(context.Context, Messager) PublishResulter); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PublishResulter)
		}
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *MockTopicer) Stop() {
	_m.Called()
}

// String provides a mock function with given fields:
func (_m *MockTopicer) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
