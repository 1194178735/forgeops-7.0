// Code generated by mockery v1.0.0. DO NOT EDIT.

package datastoreclient

import context "context"
import datastore "cloud.google.com/go/datastore"
import key "github.com/ForgeCloud/saas/tree/master/services/go/common/pkg/models/key"
import mock "github.com/stretchr/testify/mock"

// MockServicer is an autogenerated mock type for the MockServicer type
type MockServicer struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, encKey
func (_m *MockServicer) Delete(ctx context.Context, encKey string) error {
	ret := _m.Called(ctx, encKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, encKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, encKey, dst
func (_m *MockServicer) Get(ctx context.Context, encKey string, dst key.Keyer) error {
	ret := _m.Called(ctx, encKey, dst)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, key.Keyer) error); ok {
		r0 = rf(ctx, encKey, dst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query provides a mock function with given fields: ctx, qf, dst
func (_m *MockServicer) Query(ctx context.Context, qf QueryFilter, dst interface{}) error {
	ret := _m.Called(ctx, qf, dst)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, QueryFilter, interface{}) error); ok {
		r0 = rf(ctx, qf, dst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, _a1, src
func (_m *MockServicer) Save(ctx context.Context, _a1 *datastore.Key, src key.Keyer) error {
	ret := _m.Called(ctx, _a1, src)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *datastore.Key, key.Keyer) error); ok {
		r0 = rf(ctx, _a1, src)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
