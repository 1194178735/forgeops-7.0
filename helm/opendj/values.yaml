# Copyright (c) 2016-2017 ForgeRock AS.

# Default password
dirManagerPassword: password

# The default bootstrap script.
bootstrapScript: "/opt/opendj/bootstrap/setup.sh"

# The options here are "userstore" or "cts" or "proxy". 
# This sets the BOOTSTRAP_TYPE env var for the bootstrap script which is setup.sh.
bootstrapType: "userstore"


# The default OpenDJ baseDN
baseDN: "o=userstore"

# The default instance name. This will create a stateful set that can be resolved at
#  $djInstance-0.$djInstance
djInstance: ds

component: opendj

image:
  repository: forgerock-docker-public.bintray.io/forgerock/opendj
  # For development we set this to Always to get the most current image.
  pullPolicy: Always
  #pullPolicy: IfNotPresent
  tag:  6.0.0

# The number of instances in the StatefulSet. Each instance will be replicated to the master.
replicas: 1

# Set for creating sample users. If unset, only the base DN will be created.
#numberSampleUsers: 500

# Size for OpenDJ database storage. Note GKE IOPS scale based on the size of the volume.
storageSize: "10Gi"

# Size of the backup disk attached to each pod.
backupStorageSize: "10Gi"


# Set storageClass only on clusters that support it (GCP / AWS).
#storageClass: fast

# You need to be on JDK 8u131 or higher to enable these options.
opendjJavaArgs: "-server -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:+UseCompressedOops -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:MaxRAMFraction=2"

# Resource limits.
# These help for pod placement on a larger cluster to ensure the OpenDJ instance gets sufficient resources.
# For production you will want to specify CPU limits to help Kube schedule the pods.
resources:
  requests:
   memory: 1048Mi
  # Setup runs more than 1 jvm, which will attempt to allocate more memory than the pod has.
  # For install, it looks like we need at least 2GB - 2.5 GB
  limits:
    memory: 2500Mi

# DJ persistence switch. Setting this to false disables volume claims - all data is stored inside the docker image.
# Used in testing environments without pv providers. When the pod is terminated, the DJ data will be deleted!
# If you run into issues with minikube set this to false. See https://github.com/kubernetes/minikube/issues/1990
djPersistence: true

# Pod Anti Affinity switch. For production this should be set to "hard", otherwise use "soft".
# The hard setting means that do not deploy more than one pod in a node which is critical for HA.
podAntiAffinity: "soft"

gcs:
  # Set this to true to enable backups to Google Cloud Storage. You need to create the top level bucket first.
  enabled: false
  # Time in seconds to sleep between runs of the backup rsync process.
  sleepSeconds: 600
  # backup Bucket destination. You need the right scopes in container engine to write to this bucket.
  #add --scopes storage-full when you create the cluster.
  backupBucket:  gs://forgeops/dj-backup
  # Restore bucket. Usually the same as above, but for initialization we might want to restore from another source.
  restoreBucket: gs://forgeops/dj-backup


restore:
  # If true, run the init containers that can restore from a previous DS backup.
  enabled: false

# Uncomment this to create sample users.
#numberSampleUsers: 100

# Backup schedules for full and incrementals. This is a crontab format:
# minutes hour day-of-week month year
backupScheduleFull:  "2 2 * * *"
backupScheduleIncremental: "45 * * * *"

# Run the post setup job to configure replication and backup
# We default this to false for safety. You must explicitly set this to true.
runPostSetupJob: false
