/*
 * Copyright 2019 ForgeRock AS. All Rights Reserved
 *
 * Use of this code requires a commercial software license with ForgeRock AS.
 * or with one of its affiliates. All use shall be exclusively subject
 * to such license between the licensee and ForgeRock AS.
 */

@Library(value=['forgerock-pipeline-libs@cee3cc0', 'QaUtils@d69c7df', 'QaCloudUtils@de5a52c', 'java-pipeline-libs@c9f5837']) _

import com.forgerock.pipeline.reporting.PipelineRun

BASE_VERSION = '7.0.0'

// Temporarily comment out directories to prevent that image being built
buildDirectories = [
    [ name: 'git',              forceBuild: false ],
    [ name: 'java-11',          forceBuild: true ],
    [ name: 'util',             forceBuild: false ],
]

def pipeline
def pipelineRun

timestamps {
    node ('build&&linux') {

        stage ('Clone repo') {
            checkout scm
            // Stash workspace to be able to reuse it in the tests
            stash includes: '**', name: "workspace" // omit 'useDefaultExcludes: false' - no need to stash .git folder

            def jobLocation = "${env.WORKSPACE}/jenkins-scripts/pipelines/build"
            def libsLocation = "${env.WORKSPACE}/jenkins-scripts/libs"
            def stagesLocation = "${env.WORKSPACE}/jenkins-scripts/stages"

            commonModule = load("${libsLocation}/common.groovy")

            currentBuild.displayName = "#${BUILD_NUMBER} - ${commonModule.FORGEOPS_SHORT_GIT_COMMIT}"
            currentBuild.description = 'built:'

            if (env.TAG_NAME) {
                currentBuild.result = 'ABORTED'
                error 'This pipeline does not currently support building from a tag'
            } else if (isPR()) {
                pipeline = load("${jobLocation}/pr.groovy")
                pit1TestStage = load("${stagesLocation}/pit1-tests.groovy")
                prAutomation = load("${libsLocation}/pr-automation.groovy")
            } else {
                pipeline = load("${jobLocation}/postcommit.groovy")
                pit1TestStage = load("${stagesLocation}/pit1-tests.groovy")
            }

            if (isPR() && prAutomation.isAutomatedPullRequest()) {
                pipelineRun = new PipelineRun(env, steps, 'forgeops', BRANCH_NAME, commonModule.FORGEOPS_GIT_COMMIT,
                        commits: prAutomation.getPrProductCommitHashes())
            } else {
                pipelineRun = new PipelineRun(env, steps, 'forgeops', BRANCH_NAME, commonModule.FORGEOPS_GIT_COMMIT)
            }
        }

        pipeline.build()
    }

    if ('master' in [env.CHANGE_TARGET, env.BRANCH_NAME]) {
        pipeline.postBuildTests(pipelineRun)

        if (isPR()) {
            prAutomation.mergeIfAutomatedProductVersionUpdate(pipelineRun, commonModule.FORGEOPS_GIT_COMMIT)
        }
    }
}
