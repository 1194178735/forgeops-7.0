package httputil

import (
	"log"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
	"github.com/xeipuuv/gojsonschema"
)

// EntitySchemaValidator validates JSON schemas
type EntitySchemaValidator interface {
	Validate(request *http.Request) (*gojsonschema.Result, error)
}

// EndpointFunc defines the function signature expected for the endpoint handlers.
type EndpointFunc func(*gin.Context) (*EndpointResponse, error)

// RequestHandler is a handler for Gin request endpoints
type RequestHandler func(*gin.Context, GinContextHelper) (*EndpointResponse, error)

// MiddlewareHandler is a handler for Gin middleware endpoints
type MiddlewareHandler func(*gin.Context, GinContextHelper)

// HandleResponse executes an endpoint handler, adding any errors to the resulting response, and then pushes
// the response on to the ResponseBody via ginContext
func HandleResponse(handler EndpointFunc) gin.HandlerFunc {
	return func(ginContext *gin.Context) {
		response, err := handler(ginContext)
		if err != nil {
			response.ResponseBody = NewErrorResponse(err)
			ginContext.JSON(int(response.StatusCode), response.ResponseBody)
			return
		}

		if response.ResponseBody == nil {
			ginContext.Status(int(response.StatusCode))
			return
		}

		if ginContext.ContentType() == "text/plain" {
			var body string

			if value, ok := response.ResponseBody.(string); ok {
				body = value
			}

			if value, ok := response.ResponseBody.(error); ok {
				body = value.Error()
			}

			ginContext.String(int(response.StatusCode), body)
			return
		}

		ginContext.JSON(int(response.StatusCode), response.ResponseBody)
	}
}

// ParseEntityID parses a string to find a number ID and if not tries to default to 'defaultID'
func ParseEntityID(src string, defaultID int64) (int64, error) {
	// value of zero means that a new ID will be auto generated by the datastore
	var id int64
	if len(src) != 0 {
		id, _ = strconv.ParseInt(src, 10, 64)
	} else {
		id = defaultID
	}
	if id < 0 {
		log.Printf("Invalid id: %v", id)
		return id, ErrInvalidID
	}

	return id, nil
}

// WithContextHelper is a context-helper for Gin request handlers
func WithContextHelper(requestHandler RequestHandler) gin.HandlerFunc {
	withHelper := func(ginContext *gin.Context) (*EndpointResponse, error) {
		return requestHandler(ginContext, &HttpRequestContext{})
	}

	return HandleResponse(withHelper)
}

// WithMiddlewareContextHelper is a context-helper for Gin middleware handlers
func WithMiddlewareContextHelper(handler MiddlewareHandler) gin.HandlerFunc {
	return func(ginContext *gin.Context) {
		handler(ginContext, &HttpRequestContext{})
	}
}

// EndpointResponse encapsulates the body and http status code of a endpoint handler's response
type EndpointResponse struct {
	// ResponseBody is the struct defining the response from an endpoint handler
	ResponseBody interface{}
	// StatusCode is the http.Status* status code for the response
	StatusCode uint
}

func NewEndpointResponse(responseBody interface{}, statusCode uint) *EndpointResponse {
	return &EndpointResponse{
		ResponseBody: responseBody,
		StatusCode:   statusCode,
	}
}
