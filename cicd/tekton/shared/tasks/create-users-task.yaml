apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-users
spec:
  params:
  - name: users
    type: string
    description: number of users to create
    
  - name: namespace
    type: string
    description: target namespace

  - name: waitForAmster
    type: string
    default: "true"
    description: if false, do not wait for amster
  stepTemplate:
    env:
    - name: SLACK_FAILED_WEBHOOK_URL
      valueFrom:
        secretKeyRef:
          name: "slack-webhook-$(params.namespace)"
          key: SLACK_FAILED_WEBHOOK_URL
  steps:
    - name: wait-for-all-pods-ready
      image: gcr.io/cloud-builders/kubectl
      script: |
        #!/usr/bin/env bash
        {
          sleep 15
          kubectl -n $(params.namespace) wait --for=condition=complete --timeout=120s job --all
          kubectl -n $(params.namespace) get pods --no-headers=true | awk '!/Completed/{print $1}' | xargs  kubectl wait -n $(params.namespace) pod --for=condition=Ready
        } || {
          curl -X POST -H 'Content-type: application/json' --data '{"text":"$(params.namespace): Some pods still unhealthy after 600s. Failed to create users"}' $SLACK_FAILED_WEBHOOK_URL
          exit 1
        }

    - name: wait-for-amster-config
      image: gcr.io/cloud-builders/kubectl
      script: |
        #!/usr/bin/env bash
        {
          if [ "$(params.waitForAmster)" == "true" ]; then
            echo "Waiting for amster"
            (kubectl -n $(params.namespace) logs $(kubectl -n $(params.namespace) get pod -l app=amster -o jsonpath="{.items[0].metadata.name}") -f &) | grep -qi "configuration script finished"
            echo "Waited for amster"
          fi
        } || {
          curl -X POST -H 'Content-type: application/json' --data '{"text":"$(params.namespace): Amster config failed"}' $SLACK_FAILED_WEBHOOK_URL
          exit 1
        }
      
    - name: create-users
      image: gcr.io/cloud-builders/kubectl
      script: |
        #!/usr/bin/env bash
        {
          #set ADMIN_PASSWORD and run make-users.sh 
          
          ADMIN_PASSWORD=$(kubectl -n $(params.namespace) get secret ds-passwords -o jsonpath="{.data.dirmanager\.pw}" | base64 --decode)
          kubectl -n $(params.namespace) exec ds-idrepo-0 -- bash -c "ADMIN_PASSWORD=$ADMIN_PASSWORD make-users.sh $(inputs.params.users)"
        } || {
          curl -X POST -H 'Content-type: application/json' --data '{"text":"$(params.namespace): Failed to create users. See pipeline logs"}' $SLACK_FAILED_WEBHOOK_URL
          exit 1
        }      
    
