// Code generated by mockery v1.0.0. DO NOT EDIT.
package pubsubclient

import context "context"
import mock "github.com/stretchr/testify/mock"
import pubsub "cloud.google.com/go/pubsub"

// MockPubSubber is an autogenerated mock type for the PubSubber type
type MockPubSubber struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockPubSubber) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSubscription provides a mock function with given fields: ctx, id, cfg
func (_m *MockPubSubber) CreateSubscription(ctx context.Context, id string, cfg pubsub.SubscriptionConfig) (Subscriptioner, error) {
	ret := _m.Called(ctx, id, cfg)

	var r0 Subscriptioner
	if rf, ok := ret.Get(0).(func(context.Context, string, pubsub.SubscriptionConfig) Subscriptioner); ok {
		r0 = rf(ctx, id, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Subscriptioner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, pubsub.SubscriptionConfig) error); ok {
		r1 = rf(ctx, id, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTopic provides a mock function with given fields: ctx, id
func (_m *MockPubSubber) CreateTopic(ctx context.Context, id string) (Topicer, error) {
	ret := _m.Called(ctx, id)

	var r0 Topicer
	if rf, ok := ret.Get(0).(func(context.Context, string) Topicer); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Topicer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscription provides a mock function with given fields: id
func (_m *MockPubSubber) Subscription(id string) Subscriptioner {
	ret := _m.Called(id)

	var r0 Subscriptioner
	if rf, ok := ret.Get(0).(func(string) Subscriptioner); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Subscriptioner)
		}
	}

	return r0
}

// Topic provides a mock function with given fields: id
func (_m *MockPubSubber) Topic(id string) Topicer {
	ret := _m.Called(id)

	var r0 Topicer
	if rf, ok := ret.Get(0).(func(string) Topicer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Topicer)
		}
	}

	return r0
}
