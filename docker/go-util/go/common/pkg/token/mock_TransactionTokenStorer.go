// Code generated by mockery v1.0.0. DO NOT EDIT.
package token

import (
	context "context"

	datastore "cloud.google.com/go/datastore"
	datastoreclient "github.com/ForgeCloud/saas/tree/master/services/go/common/pkg/datastoreclient"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockTransactionTokenStorer is an autogenerated mock type for the MockTransactionTokenStorer type
type MockTransactionTokenStorer struct {
	mock.Mock
}

// CompleteWithTransaction provides a mock function with given fields: ctx, tx, _a2
func (_m *MockTransactionTokenStorer) CompleteWithTransaction(ctx context.Context, tx datastoreclient.DataStorerTransaction, _a2 string) (*TokenEntity, error) {
	ret := _m.Called(ctx, tx, _a2)

	var r0 *TokenEntity
	if rf, ok := ret.Get(0).(func(context.Context, datastoreclient.DataStorerTransaction, string) *TokenEntity); ok {
		r0 = rf(ctx, tx, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TokenEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datastoreclient.DataStorerTransaction, string) error); ok {
		r1 = rf(ctx, tx, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Complete provides a mock function with given fields: ctx, _a1
func (_m *MockTransactionTokenStorer) Complete(ctx context.Context, _a1 string) (*TokenEntity, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *TokenEntity
	if rf, ok := ret.Get(0).(func(context.Context, string) *TokenEntity); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TokenEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, kind, userID, userType, lifetime
func (_m *MockTransactionTokenStorer) Create(ctx context.Context, kind TokenKind, userID string, userType UserType, lifetime *time.Duration) (*TokenEntity, error) {
	ret := _m.Called(ctx, kind, userID, userType, lifetime)

	var r0 *TokenEntity
	if rf, ok := ret.Get(0).(func(context.Context, TokenKind, string, UserType, *time.Duration) *TokenEntity); ok {
		r0 = rf(ctx, kind, userID, userType, lifetime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TokenEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, TokenKind, string, UserType, *time.Duration) error); ok {
		r1 = rf(ctx, kind, userID, userType, lifetime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWithTransaction provides a mock function with given fields: ctx, tx, kind, userID, userType, lifetime
func (_m *MockTransactionTokenStorer) CreateWithTransaction(ctx context.Context, tx datastoreclient.DataStorerTransaction, kind TokenKind, userID string, userType UserType, lifetime *time.Duration) (*TokenEntity, error) {
	ret := _m.Called(ctx, tx, kind, userID, userType, lifetime)

	var r0 *TokenEntity
	if rf, ok := ret.Get(0).(func(context.Context, datastoreclient.DataStorerTransaction, TokenKind, string, UserType, *time.Duration) *TokenEntity); ok {
		r0 = rf(ctx, tx, kind, userID, userType, lifetime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TokenEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datastoreclient.DataStorerTransaction, TokenKind, string, UserType, *time.Duration) error); ok {
		r1 = rf(ctx, tx, kind, userID, userType, lifetime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Expire provides a mock function with given fields: ctx, _a1
func (_m *MockTransactionTokenStorer) Expire(ctx context.Context, _a1 string) (*TokenEntity, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *TokenEntity
	if rf, ok := ret.Get(0).(func(context.Context, string) *TokenEntity); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TokenEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpireWithTransaction provides a mock function with given fields: ctx, tx, _a2
func (_m *MockTransactionTokenStorer) ExpireWithTransaction(ctx context.Context, tx datastoreclient.DataStorerTransaction, _a2 string) (*TokenEntity, error) {
	ret := _m.Called(ctx, tx, _a2)

	var r0 *TokenEntity
	if rf, ok := ret.Get(0).(func(context.Context, datastoreclient.DataStorerTransaction, string) *TokenEntity); ok {
		r0 = rf(ctx, tx, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TokenEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datastoreclient.DataStorerTransaction, string) error); ok {
		r1 = rf(ctx, tx, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByToken provides a mock function with given fields: ctx, _a1
func (_m *MockTransactionTokenStorer) GetByToken(ctx context.Context, _a1 string) (*TokenEntity, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *TokenEntity
	if rf, ok := ret.Get(0).(func(context.Context, string) *TokenEntity); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TokenEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithTransaction provides a mock function with given fields: ctx, tx, _a2
func (_m *MockTransactionTokenStorer) GetWithTransaction(ctx context.Context, tx datastoreclient.DataStorerTransaction, _a2 string) (*TokenEntity, error) {
	ret := _m.Called(ctx, tx, _a2)

	var r0 *TokenEntity
	if rf, ok := ret.Get(0).(func(context.Context, datastoreclient.DataStorerTransaction, string) *TokenEntity); ok {
		r0 = rf(ctx, tx, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TokenEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datastoreclient.DataStorerTransaction, string) error); ok {
		r1 = rf(ctx, tx, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransaction provides a mock function with given fields: ctx, opts
func (_m *MockTransactionTokenStorer) NewTransaction(ctx context.Context, opts ...datastore.TransactionOption) (datastoreclient.DataStorerTransaction, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 datastoreclient.DataStorerTransaction
	if rf, ok := ret.Get(0).(func(context.Context, ...datastore.TransactionOption) datastoreclient.DataStorerTransaction); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastoreclient.DataStorerTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...datastore.TransactionOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
