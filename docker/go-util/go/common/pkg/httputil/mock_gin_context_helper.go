// Code generated by mockery v1.0.0. DO NOT EDIT.
package httputil

import (
	"context"

	gin "github.com/gin-gonic/gin"
)
import http "net/http"
import mock "github.com/stretchr/testify/mock"

// MockGinContextHelper is an autogenerated mock type for the GinContextHelper type
type MockGinContextHelper struct {
	mock.Mock
}

// AbortWithStatusJSON provides a mock function with given fields: context, code, jsonObj
func (_m *MockGinContextHelper) AbortWithStatusJSON(context *gin.Context, code int, jsonObj interface{}) {
	_m.Called(context, code, jsonObj)
}

// BindRequestBody provides a mock function with given fields: requestBody, request
func (_m *MockGinContextHelper) BindRequestBody(requestBody interface{}, request *http.Request) error {
	ret := _m.Called(requestBody, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, *http.Request) error); ok {
		r0 = rf(requestBody, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetHeader provides a mock function with given fields: context, key
func (_m *MockGinContextHelper) GetContext(gcontext *gin.Context) context.Context {
	ret := _m.Called(gcontext)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(*gin.Context) context.Context); ok {
		r0 = rf(gcontext)
	} else {
		r0 = ret.Get(0).(context.Context)
	}

	return r0
}

// GetHeader provides a mock function with given fields: context, key
func (_m *MockGinContextHelper) GetHeader(context *gin.Context, key string) string {
	ret := _m.Called(context, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(*gin.Context, string) string); ok {
		r0 = rf(context, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetParam provides a mock function with given fields: context, key
func (_m *MockGinContextHelper) GetParam(context *gin.Context, key string) string {
	ret := _m.Called(context, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(*gin.Context, string) string); ok {
		r0 = rf(context, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetParamInt64 provides a mock function with given fields: context, key
func (_m *MockGinContextHelper) GetParamInt64(context *gin.Context, key string) (int64, error) {
	ret := _m.Called(context, key)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*gin.Context, string) int64); ok {
		r0 = rf(context, key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gin.Context, string) error); ok {
		r1 = rf(context, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuery provides a mock function with given fields: context, key
func (_m *MockGinContextHelper) GetQuery(context *gin.Context, key string) (string, bool) {
	ret := _m.Called(context, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(*gin.Context, string) string); ok {
		r0 = rf(context, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(*gin.Context, string) bool); ok {
		r1 = rf(context, key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetRequestURLPath provides a mock function with given fields: context
func (_m *MockGinContextHelper) GetRequestURLPath(context *gin.Context) string {
	ret := _m.Called(context)

	var r0 string
	if rf, ok := ret.Get(0).(func(*gin.Context) string); ok {
		r0 = rf(context)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HasParam provides a mock function with given fields: context, key
func (_m *MockGinContextHelper) HasParam(context *gin.Context, key string) bool {
	ret := _m.Called(context, key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*gin.Context, string) bool); ok {
		r0 = rf(context, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Next provides a mock function with given fields: context
func (_m *MockGinContextHelper) Next(context *gin.Context) {
	_m.Called(context)
}

// ParseEntityID provides a mock function with given fields: context, idKey, defaultID
func (_m *MockGinContextHelper) ParseEntityID(context *gin.Context, idKey string, defaultID int64) (int64, error) {
	ret := _m.Called(context, idKey, defaultID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*gin.Context, string, int64) int64); ok {
		r0 = rf(context, idKey, defaultID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gin.Context, string, int64) error); ok {
		r1 = rf(context, idKey, defaultID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateAndBindRequestBody provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockGinContextHelper) ValidateAndBindRequestBody(_a0 *gin.Context, _a1 interface{}, _a2 EntitySchemaValidator) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, interface{}, EntitySchemaValidator) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateRequest provides a mock function with given fields: validator, request
func (_m *MockGinContextHelper) ValidateRequest(validator EntitySchemaValidator, request *http.Request) MultiError {
	ret := _m.Called(validator, request)

	var r0 MultiError
	if rf, ok := ret.Get(0).(func(EntitySchemaValidator, *http.Request) MultiError); ok {
		r0 = rf(validator, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(MultiError)
		}
	}

	return r0
}
