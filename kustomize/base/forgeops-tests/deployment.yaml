apiVersion: apps/v1
kind: Deployment
metadata:
  name: forgeops-tests
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      volumes:
      - name: reports
        emptyDir: {}
      containers:
      - name: forgeops-tests
        image: forgeops-tests
        imagePullPolicy: Always
        command: ["bash", "-c"]
        #args: ["exec flask run --no-reload --no-debugger --host '0.0.0.0' --port '8080'"]
        args: ["exec gunicorn tester:app  -b 0.0.0.0:8080 --timeout 180 --access-logfile -"]
        resources:
          limits:
            memory: 1Gi
            cpu: 1
          requests:
            memory: 1Gi
        volumeMounts:
        - mountPath: /usr/src/app/tester/reports
          name: reports
        env:
        - name: SMOKETESTS_USER
          valueFrom:
            secretKeyRef:
              name: forgeops-tester
              key: SMOKETESTS_USER

        - name: SMOKETESTS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: forgeops-tester
              key: SMOKETESTS_PASSWORD

        - name: FLASK_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: forgeops-tester
              key: FLASK_SECRET_KEY

        - name: SLACK_NOTIFICATION_ENABLE
          value: enabled

        - name: SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: slack-webhook
              key: SLACK_WEBHOOK_URL

        - name: INGRESS_PATH_PREFIX
          value: /tests
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace

        - name: TESTS_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace

        - name: TESTS_DOMAIN
          valueFrom:
            configMapKeyRef:
              key: DOMAIN
              name: platform-config

        - name: TESTS_SUBDOMAIN
          valueFrom:
            configMapKeyRef:
              key: SUBDOMAIN
              name: platform-config

        ports:
          - containerPort: 8080
