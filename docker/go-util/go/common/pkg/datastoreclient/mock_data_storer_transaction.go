// Code generated by mockery v1.0.0. DO NOT EDIT.
package datastoreclient

import datastore "cloud.google.com/go/datastore"
import mock "github.com/stretchr/testify/mock"

// MockDataStorerTransaction is an autogenerated mock type for the DataStorerTransaction type
type MockDataStorerTransaction struct {
	mock.Mock
}

// Commit provides a mock function with given fields:
func (_m *MockDataStorerTransaction) Commit() (*datastore.Commit, error) {
	ret := _m.Called()

	var r0 *datastore.Commit
	if rf, ok := ret.Get(0).(func() *datastore.Commit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.Commit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: key
func (_m *MockDataStorerTransaction) Delete(key *datastore.Key) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(*datastore.Key) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMulti provides a mock function with given fields: keys
func (_m *MockDataStorerTransaction) DeleteMulti(keys []*datastore.Key) error {
	ret := _m.Called(keys)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*datastore.Key) error); ok {
		r0 = rf(keys)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: key, dst
func (_m *MockDataStorerTransaction) Get(key *datastore.Key, dst interface{}) error {
	ret := _m.Called(key, dst)

	var r0 error
	if rf, ok := ret.Get(0).(func(*datastore.Key, interface{}) error); ok {
		r0 = rf(key, dst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMulti provides a mock function with given fields: keys, dst
func (_m *MockDataStorerTransaction) GetMulti(keys []*datastore.Key, dst interface{}) error {
	ret := _m.Called(keys, dst)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*datastore.Key, interface{}) error); ok {
		r0 = rf(keys, dst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mutate provides a mock function with given fields: muts
func (_m *MockDataStorerTransaction) Mutate(muts ...*datastore.Mutation) ([]*datastore.PendingKey, error) {
	_va := make([]interface{}, len(muts))
	for _i := range muts {
		_va[_i] = muts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*datastore.PendingKey
	if rf, ok := ret.Get(0).(func(...*datastore.Mutation) []*datastore.PendingKey); ok {
		r0 = rf(muts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*datastore.PendingKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...*datastore.Mutation) error); ok {
		r1 = rf(muts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: key, src
func (_m *MockDataStorerTransaction) Put(key *datastore.Key, src interface{}) (*datastore.PendingKey, error) {
	ret := _m.Called(key, src)

	var r0 *datastore.PendingKey
	if rf, ok := ret.Get(0).(func(*datastore.Key, interface{}) *datastore.PendingKey); ok {
		r0 = rf(key, src)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.PendingKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*datastore.Key, interface{}) error); ok {
		r1 = rf(key, src)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMulti provides a mock function with given fields: keys, src
func (_m *MockDataStorerTransaction) PutMulti(keys []*datastore.Key, src interface{}) ([]*datastore.PendingKey, error) {
	ret := _m.Called(keys, src)

	var r0 []*datastore.PendingKey
	if rf, ok := ret.Get(0).(func([]*datastore.Key, interface{}) []*datastore.PendingKey); ok {
		r0 = rf(keys, src)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*datastore.PendingKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*datastore.Key, interface{}) error); ok {
		r1 = rf(keys, src)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollback provides a mock function with given fields:
func (_m *MockDataStorerTransaction) Rollback() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
